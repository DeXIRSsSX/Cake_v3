//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfApp7
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class caaakeEntities : DbContext
    {
        private static caaakeEntities _context;
        public caaakeEntities()
            : base("name=caaakeEntities")
        {
        }
        public static caaakeEntities GetContext()
        {
            if (_context == null)
                _context = new caaakeEntities();
            return _context;
        }
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<kurier> kuriers { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Tovar> Tovars { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Zakaz> Zakazs { get; set; }
    
        public virtual int addClient(Nullable<int> id_client, string name, Nullable<int> phone, string email, Nullable<System.DateTime> date, string address, string password)
        {
            var id_clientParameter = id_client.HasValue ?
                new ObjectParameter("id_client", id_client) :
                new ObjectParameter("id_client", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var phoneParameter = phone.HasValue ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addClient", id_clientParameter, nameParameter, phoneParameter, emailParameter, dateParameter, addressParameter, passwordParameter);
        }
    
        public virtual int addEployee(Nullable<int> id_client, string name, Nullable<int> phone, string email, Nullable<System.DateTime> date, string password)
        {
            var id_clientParameter = id_client.HasValue ?
                new ObjectParameter("id_client", id_client) :
                new ObjectParameter("id_client", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var phoneParameter = phone.HasValue ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addEployee", id_clientParameter, nameParameter, phoneParameter, emailParameter, dateParameter, passwordParameter);
        }
    
        public virtual ObjectResult<ClientsLowerPassword_Result> ClientsLowerPassword()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClientsLowerPassword_Result>("ClientsLowerPassword");
        }
    
        public virtual int deleteClient(Nullable<int> id_Client)
        {
            var id_ClientParameter = id_Client.HasValue ?
                new ObjectParameter("id_Client", id_Client) :
                new ObjectParameter("id_Client", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteClient", id_ClientParameter);
        }
    
        public virtual int deleteEployee(Nullable<int> id_Employee)
        {
            var id_EmployeeParameter = id_Employee.HasValue ?
                new ObjectParameter("id_Employee", id_Employee) :
                new ObjectParameter("id_Employee", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteEployee", id_EmployeeParameter);
        }
    
        public virtual ObjectResult<string> GetAllClientPasswords()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetAllClientPasswords");
        }
    
        public virtual ObjectResult<GetAllClientsAndEmployees_Result> GetAllClientsAndEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllClientsAndEmployees_Result>("GetAllClientsAndEmployees");
        }
    
        public virtual ObjectResult<GetAllEmployee_Result> GetAllEmployee()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllEmployee_Result>("GetAllEmployee");
        }
    
        public virtual ObjectResult<string> GetAllEmployeePasswords()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetAllEmployeePasswords");
        }
    
        public virtual ObjectResult<GetAllTovar_Result> GetAllTovar()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTovar_Result>("GetAllTovar");
        }
    
        public virtual ObjectResult<GetAllZakaz_Result> GetAllZakaz()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllZakaz_Result>("GetAllZakaz");
        }
    
        public virtual ObjectResult<GetClientContacts_Result> GetClientContacts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClientContacts_Result>("GetClientContacts");
        }
    
        public virtual int GetCourierInfo(Nullable<int> id_kurier)
        {
            var id_kurierParameter = id_kurier.HasValue ?
                new ObjectParameter("id_kurier", id_kurier) :
                new ObjectParameter("id_kurier", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCourierInfo", id_kurierParameter);
        }
    
        public virtual ObjectResult<GetZakazClients_Result> GetZakazClients()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetZakazClients_Result>("GetZakazClients");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
